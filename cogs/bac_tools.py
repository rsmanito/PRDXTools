"""
Cog-file for synchronization nicknames and roles at BAC discord guild
"""
import logging
import disnake
from disnake import ApplicationCommandInteraction
from disnake.ext import commands

import settings

logger = logging.getLogger(__name__)


# TODO: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–¥–µ–ª–∞—Ç—å –∫–∞–∫–∏–º-—Ç–æ —Ö—É–µ–º
# TODO: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–¥ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ aiomysql
# TODO: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–¥ –∫—É–±–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–µ


class BACTools(commands.Cog):  # TODO: Rename
    """
    Cog for GCA(Grand Court of Appeal) tools - announcements
    """

    def __init__(self, bot: disnake.ext.commands.Bot):
        self.bot = bot

        self.bac_guild = None
        self.bac_banned_role = None
        self.bac_has_pass_role = None
        self.defendant_role = None
        self.juror_role = None

        self.dev_logs_channel = None
        self.announcements_channel = None

    async def log_for_admins(
        self,
        user: disnake.Member,
        result: str,
        clear_inventory: bool,
        additions: str,
        reset_pass: bool,
        conditions: str,
    ):
        """
        Logs data about unbanned / or

        """
        msg = await self.dev_logs_channel.send(
            embed=disnake.Embed(
                description=" | ".join(
                    [
                        user.display_name,
                        str(user),
                        result,
                        "–û—á–∏—â–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: " + str(clear_inventory),
                        "–°–±—Ä–∞—Å—ã–≤–∞—Ç—å –ø—Ä–æ—Ö–æ–¥–∫—É: " + str(reset_pass),
                        additions,
                        conditions,
                    ]
                ),
            )
        )

        await msg.add_reaction("‚úî")

    @commands.guild_permissions(
        settings.BACGuild.guild_id,
        roles={
            settings.BACGuild.staff_role_id: True,
            settings.BACGuild.admin_role_id: True,
        },
        owner=True,
    )
    @commands.slash_command(
        name="–∑–∞—è–≤–∫–∞",
        guild_ids=[settings.BACGuild.guild_id],
        default_permission=False,
    )
    async def request_placeholder(self, inter: ApplicationCommandInteraction):
        """
        Placeholder for sub commands
        """
        pass

    @request_placeholder.sub_command(
        name="–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
        guild_ids=[settings.BACGuild.guild_id],
    )
    async def request_declined(
        self,
        inter: ApplicationCommandInteraction,
        user: disnake.Member,
        tripetto_id: str,
        reason: str,
    ):
        """
        –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞

        Parameters
        ----------
        user: –ò–≥—Ä–æ–∫
        tripetto_id: ID –∑–∞—è–≤–∫–∏
        reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        inter: ApplicationCommandInteraction object

        """
        await inter.response.defer(ephemeral=True)

        await (await self.announcements_channel.webhooks())[0].send(
            content=user.mention,
            embed=disnake.Embed(
                title="üü• –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                color=disnake.Color.red(),
                description=reason,
            ).set_footer(
                text=f"{inter.author.display_name} „Üç ID: {tripetto_id}",
                icon_url=f"https://rp.plo.su/avatar/{inter.author.display_name}",
            ),
        )

        await inter.edit_original_message(content="–î–µ–ª–æ —Å–¥–µ–ª–∞–Ω–æ")

    @request_placeholder.sub_command(
        name="–æ–¥–æ–±—Ä–µ–Ω–∞",
        guild_ids=[settings.BACGuild.guild_id],
    )
    async def request_accepted(
        self,
        inter: ApplicationCommandInteraction,
        user: disnake.Member,
        tripetto_id: str,
        result: str = commands.Param(
            autocomplete=lambda *args: [
                "–†–∞–∑–±–∞–Ω",
                "–ö—Ä–∞—Å–Ω—ã–π –≤–∞—Ä–Ω —Å–Ω–∏–º–∞–µ—Ç—Å—è",
                "–î–≤–∞ –∫—Ä–∞—Å–Ω—ã—Ö –≤–∞—Ä–Ω–∞ —Å–Ω–∏–º–∞—é—Ç—Å—è",
                "–†–∞–∑–±–∞–Ω, –∫—Ä–∞—Å–Ω—ã–π –≤–∞—Ä–Ω —Å–Ω–∏–º–∞–µ—Ç—Å—è",
                "–†–∞–∑–±–∞–Ω, –¥–≤–∞ –∫—Ä–∞—Å–Ω—ã—Ö –≤–∞—Ä–Ω–∞ —Å–Ω–∏–º–∞—é—Ç—Å—è",
            ]
        ),
        conditions: str = "",
        clear_inventory: bool = False,
        reset_pass: bool = False,
        additions: str = "",
    ):
        """
        –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞

        Parameters
        ----------
        user: –ò–≥—Ä–æ–∫
        tripetto_id: ID –∑–∞—è–≤–∫–∏
        result: –¢–∏–ø —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
        conditions: –£—Å–ª–æ–≤–∏—è
        clear_inventory: –û—á–∏—Å—Ç–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        reset_pass: –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–∫—É
        additions: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–Ω—è—Ç–∏–µ –∫—Ä–∞—Å–Ω—ã—Ö –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ
        inter: ApplicationCommandInteraction object


        """
        await inter.response.defer(ephemeral=True)

        embed = disnake.Embed(
            title="üü© –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞",
            color=disnake.Color.dark_green(),
            description="–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ - **{0}{1}**\n\n{2}".format(
                result, (f", –ø—Ä–æ—Ö–æ–¥–∫–∞ –æ–±–Ω—É–ª—è–µ—Ç—Å—è" if reset_pass else ""), additions
            ),
        ).set_footer(
            text=f"{inter.author.display_name} „Üç ID: {tripetto_id}",
            icon_url=f"https://rp.plo.su/avatar/{inter.author.display_name}",
        )

        if conditions:
            embed.add_field(name="–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–≥—Ä–æ–∫—É", value=conditions)

        self.announcements_channel: disnake.NewsChannel
        await (await self.announcements_channel.webhooks())[0].send(
            content=user.mention, embed=embed
        )

        await inter.edit_original_message(content="–î–µ–ª–æ —Å–¥–µ–ª–∞–Ω–æ")

        await self.log_for_admins(
            user=user,
            result=result,
            additions=additions,
            conditions=conditions,
            clear_inventory=clear_inventory,
            reset_pass=reset_pass,
        )

    @request_placeholder.sub_command(
        name="–¥–æ–ø—É—â–µ–Ω–∞",
        guild_ids=[settings.BACGuild.guild_id],
    )
    async def request_approved(
        self,
        inter: ApplicationCommandInteraction,
        user: disnake.Member,
        tripetto_id: str,
    ):
        """
        –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ —Å—É–¥–µ

        Parameters
        ----------
        user: –ò–≥—Ä–æ–∫
        tripetto_id: ID –∑–∞—è–≤–∫–∏
        inter: ApplicationCommandInteraction object


        """
        await inter.response.defer(ephemeral=True)

        self.announcements_channel: disnake.NewsChannel
        await (await self.announcements_channel.webhooks())[0].send(
            content=user.mention,
            embed=disnake.Embed(
                title="üü® –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ —Å—É–¥–µ",
                color=disnake.Color.yellow(),
            ).set_footer(
                text=f"{inter.author.display_name} „Üç ID: {tripetto_id}",
                icon_url=f"https://rp.plo.su/avatar/{inter.author.display_name}",
            ),
        )

        await inter.edit_original_message(content="–î–µ–ª–æ —Å–¥–µ–ª–∞–Ω–æ")
        await user.add_roles(
            self.defendant_role, reason="–î–µ–ª–æ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ –≤ —Å—É–¥–µ"
        )

    @commands.guild_permissions(
        settings.BACGuild.guild_id,
        roles={
            settings.BACGuild.staff_role_id: True,
            settings.BACGuild.admin_role_id: True,
        },
        owner=True,
    )
    @commands.slash_command(
        name="—Å—É–¥",
        guild_ids=[settings.BACGuild.guild_id],
        default_permission=False,
    )
    async def court_placeholder(self, inter: ApplicationCommandInteraction):
        """
        Placeholder for sub commands
        """
        pass

    @court_placeholder.sub_command(
        name="–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ",
        guild_ids=[settings.BACGuild.guild_id],
    )
    async def court_declined(
        self,
        inter: ApplicationCommandInteraction,
        user: disnake.Member,
        tripetto_id: str,
        addition: str = "–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–∑–∂–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∞–ø–µ–ª–ª—è—Ü–∏–æ–Ω–Ω—ã–π —Å—É–¥",
    ):
        """
        –ó–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ —Å—É–¥–µ

        Parameters
        ----------
        user: –ò–≥—Ä–æ–∫
        tripetto_id: ID –∑–∞—è–≤–∫–∏
        addition: –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞
        inter: ApplicationCommandInteraction object

        """
        await inter.response.defer(ephemeral=True)

        embed = disnake.Embed(
            title="üü• –ó–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ —Å—É–¥–µ",
            color=disnake.Color.red(),
            description="–†–µ–∑—É–ª—å—Ç–∞—Ç - **–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ**",
        ).set_footer(
            text=f"{inter.author.display_name} „Üç ID: {tripetto_id}",
            icon_url=f"https://rp.plo.su/avatar/{inter.author.display_name}",
        )

        embed.add_field(name="–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ", value=addition)

        self.announcements_channel: disnake.NewsChannel
        await (await self.announcements_channel.webhooks())[0].send(
            content=user.mention,
            embed=embed,
        )

        if self.defendant_role in user.roles:
            await user.remove_roles(self.defendant_role)

        await inter.edit_original_message(content="–î–µ–ª–æ —Å–¥–µ–ª–∞–Ω–æ")

    @court_placeholder.sub_command(
        name="–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ",
        guild_ids=[settings.BACGuild.guild_id],
    )
    async def court_accepted(
        self,
        inter: ApplicationCommandInteraction,
        user: disnake.Member,
        tripetto_id: str,
        result: str = commands.Param(
            autocomplete=lambda *args: [
                "–†–∞–∑–±–∞–Ω",
                "–ö—Ä–∞—Å–Ω—ã–π –≤–∞—Ä–Ω —Å–Ω–∏–º–∞–µ—Ç—Å—è",
                "–î–≤–∞ –∫—Ä–∞—Å–Ω—ã—Ö –≤–∞—Ä–Ω–∞ —Å–Ω–∏–º–∞—é—Ç—Å—è",
                "–†–∞–∑–±–∞–Ω, –∫—Ä–∞—Å–Ω—ã–π –≤–∞—Ä–Ω —Å–Ω–∏–º–∞–µ—Ç—Å—è",
                "–†–∞–∑–±–∞–Ω, –¥–≤–∞ –∫—Ä–∞—Å–Ω—ã—Ö –≤–∞—Ä–Ω–∞ —Å–Ω–∏–º–∞—é—Ç—Å—è",
            ]
        ),
        conditions: str = "",
        clear_inventory: bool = False,
        reset_pass: bool = False,
        additions: str = "",
    ):
        """
        –ó–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ —Å—É–¥–µ

        Parameters
        ----------
        user: –ò–≥—Ä–æ–∫
        tripetto_id: ID –∑–∞—è–≤–∫–∏
        result: –¢–∏–ø —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
        conditions: –£—Å–ª–æ–≤–∏—è
        clear_inventory: –û—á–∏—Å—Ç–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        reset_pass: –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–∫—É
        additions: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä —Å–Ω—è—Ç–∏–µ –∫—Ä–∞—Å–Ω—ã—Ö –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ
        inter: ApplicationCommandInteraction object

        """
        await inter.response.defer(ephemeral=True)

        embed = disnake.Embed(
            title="üü© –ó–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –≤ —Å—É–¥–µ",
            color=disnake.Color.dark_green(),
            description="–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ - **{0}{1}**\n\n{2}".format(
                result, (f", –ø—Ä–æ—Ö–æ–¥–∫–∞ –æ–±–Ω—É–ª—è–µ—Ç—Å—è" if reset_pass else ""), additions
            ),
        ).set_footer(
            text=f"{inter.author.display_name} „Üç ID: {tripetto_id}",
            icon_url=f"https://rp.plo.su/avatar/{inter.author.display_name}",
        )

        if conditions:
            embed.add_field(name="–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∏–≥—Ä–æ–∫—É", value=conditions)

        self.announcements_channel: disnake.NewsChannel
        await (await self.announcements_channel.webhooks())[0].send(
            content=user.mention, embed=embed
        )

        await inter.edit_original_message(content="–î–µ–ª–æ —Å–¥–µ–ª–∞–Ω–æ")

        if self.defendant_role in user.roles:
            await user.remove_roles(self.defendant_role)

        await self.log_for_admins(
            user=user,
            result=result,
            additions=additions,
            conditions=conditions,
            clear_inventory=clear_inventory,
            reset_pass=reset_pass,
        )

    @commands.Cog.listener()
    async def on_ready(self):
        """
        Called when disnake bot object is ready
        """
        self.bac_guild: disnake.Guild = self.bot.get_guild(settings.BACGuild.guild_id)

        self.announcements_channel: disnake.NewsChannel = self.bac_guild.get_channel(
            settings.BACGuild.announcements_channel_id
        )
        self.dev_logs_channel: disnake.TextChannel = self.bac_guild.get_channel(
            settings.BACGuild.dev_logs_channel_id
        )

        self.defendant_role = self.bac_guild.get_role(
            settings.BACGuild.defendant_role_id
        )
        self.juror_role = self.bac_guild.get_role(settings.BACGuild.juror_role_id)
        self.bac_has_pass_role: disnake.Role = self.bac_guild.get_role(
            settings.BACGuild.has_pass_role_id
        )
        self.bac_banned_role: disnake.Role = self.bac_guild.get_role(
            settings.BACGuild.banned_role_id
        )

        logger.info("%s Ready", __name__)


def setup(client):
    """
    Disnake internal setup function
    """
    client.add_cog(BACTools(client))
